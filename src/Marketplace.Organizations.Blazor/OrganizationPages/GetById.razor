@page "/GetById/{Id}"
@inject HttpClient _httpClient
@inject ILocalStorageService _LocalStorageService
@using Marketplace.Organizations.Blazor.Models
@using Blazored.LocalStorage
<h3>GetById</h3>
@if (IsLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Getting Organization...</span>
    </div>
}
else if (Model is null)
{
    <h1 style="color: red"><em>Loading...</em></h1>
}
else
{
    <div class="row col-lg-12 col-md-12 col-sm-12 gap-3 d-flex justify-content-center" style="height:50px">
        <div class="card" style="width: 18rem;">
            <img class="card-img-top" src="@Model.Logo" alt="Card image cap">
            <div class="card-body">
                <h3 class="card-title">@Model.Name</h3>
                <p class="card-text">@Model.Description</p>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Contacts:<strong>@Model.Contact</strong></li>
                @foreach (var address in Model.Addresses!)
                {
                    <li class="list-group-item">Location:@address.Address</li>
                }
                @foreach (var user in Model.Users!)
                {
                    <li class="list-group-item">OrganizationId:@user.OrganizationId</li>
                    <li class="list-group-item">OwnerId:@user.UserId</li>
                }
            </ul>
        </div>
    </div>
}
@code {
    [Parameter]
    public string? Id { get; set; }
    private bool IsLoading = false;
    private OrganizationModel? Model = new ();
    protected override async  Task OnInitializedAsync()
    {
        IsLoading = true;
        var token = await _LocalStorageService.GetItemAsStringAsync("token");
        var request = new HttpRequestMessage(HttpMethod.Get, $"/organizations/GetById/{Id}");
        request.Headers.Add("Authorization",$"Bearer {token}");
        var response = await _httpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Model = await response.Content.ReadFromJsonAsync<OrganizationModel>();
            IsLoading = false;
        }
    }

}