@page "/organization/{organizationId}"
@using Marketplace.Blazor.OrganizationModels
@using Blazored.LocalStorage
@inject HttpClient Client
@inject ILocalStorageService Storage

<h3>Organization Details</h3>

@if (organization != null)
{
    <div>
        <p><strong>Organization Name: </strong> @organization.Name</p>
        <p><strong>Description: </strong> @organization.Description</p>
        <p><strong>Logo Url: </strong> @organization.Logo</p>
        <p><strong>Contact: </strong> @organization.Contact</p>
        <h4>Users: </h4>
        @if (organization.Users != null && organization.Users.Any())
        {
            <ul>
                @foreach (var user in organization.Users)
                {
                    <li>@user.UserId - @user.UserRole</li>
                }
            </ul>
        }
        else
        {
            <p>No users found.</p>
        }
        <h4>Addresses:</h4>
        @if (organization.Addresses != null && organization.Addresses.Any())
        {
            <ul>
                @foreach (var address in organization.Addresses)
                {
                    <li>@address.Address</li>
                }
            </ul>
        }
        else
        {
            <p>No addresses found.</p>
        }
    </div>
}
else
{
    <p>Loading organization details...</p>
}

@code {
    [Parameter]
    public string OrganizationId { get; set; } // Change the type to string

    private OrganizationModel? organization;

    protected override async Task OnInitializedAsync()
    {
        var token = await Storage.GetItemAsStringAsync("token");

        if (Guid.TryParse(OrganizationId, out Guid parsedOrganizationId) && !string.IsNullOrEmpty(token))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/organizations/{parsedOrganizationId}");
            request.Headers.Add("Authorization", $"Bearer {token}");

            var response = await Client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                organization = await response.Content.ReadFromJsonAsync<OrganizationModel>();
            }
        }
    }
}