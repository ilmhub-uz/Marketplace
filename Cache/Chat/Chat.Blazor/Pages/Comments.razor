@page "/comments/{ProductId}"
@using Chat.Blazor.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@inject ConversationsService ConversationsService
@inject ILocalStorageService Storage
@inject HttpClient Http

<h3>Chat</h3>
<h3>UserName: @ProductId</h3>

<div>
	@foreach (var message in messages)
	{
		<h3>@message.Text</h3>
		<h6>@message.Date.ToString("g")</h6>
	}
</div>

<form>
	<input class="form-control" type="text" @bind-value="messageText" placeholder="message" />
	<button type="button" class="btn btn-primary form-control" @onclick="(async() => await SendMessage())">Send</button>
</form>

@code {
	private string messageText { get; set; }

	[Parameter]
	public string? ProductId { get; set; }

	private List<MessageModel>? messages = new List<MessageModel>();

	private HubConnection? _hubConnection;

	protected override async Task OnInitializedAsync()
	{
		messages = await ConversationsService.Get<List<MessageModel>>($"api/Conversations/{ProductId}");
		await ConnectToHub();
	}

	private async Task ConnectToHub()
	{
		var token = await Storage.GetItemAsStringAsync("token");

		_hubConnection = new HubConnectionBuilder()
			.WithUrl($"http://localhost:5071/hubs/conversation?token={token}")
			.Build();

		_hubConnection.On<MessageModel>("NewMessage", model =>
		{
			messages.Add(model);
			StateHasChanged();
		});

		await _hubConnection.StartAsync();

		await _hubConnection.SendAsync("JoinGroup", ProductId);
	}

	private async Task SendMessage()
	{
		var token = await Storage.GetItemAsStringAsync("token");

		var request = new HttpRequestMessage(HttpMethod.Post, "api/Conversations");
		request.Headers.Add("Authorization", $"Bearer {token}");
		request.Content = JsonContent.Create(new NewMessageModel()
			{
				Text = messageText,
				ToUserId = messages[0].FromUserId
			});
		await Http.SendAsync(request);
	}

	public class MessageModel
	{
		public Guid Id { get; set; }
		public Guid FromUserId { get; set; }

		public required string Text { get; set; }
		public DateTime Date { get; set; }
	}

	public class NewMessageModel
	{
		public Guid ToUserId { get; set; }

		public required string Text { get; set; }
	}
}